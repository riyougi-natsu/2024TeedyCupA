import polars as pl
from Data_Compress import datatype_compress
def pre_treat(raw_df):
    rename_columns={ # 重命名列名对应字典
        '日期':'date',
        '时间':'time',
        '生产线编号':'line_id',
        '物料推送气缸推送状态':'material_push',
        '物料推送气缸收回状态':'material_withdraw',
        '物料推送数':'material_push_nums',
        '物料待抓取数':'material_grab_remains',
        '容器上传检测数':'container_uploads_detect_nums',
        '填装检测数':'filling_detect_nums',
        '填装定位器固定状态':'filling_locator_fixed',
        '填装定位器放开状态':'filling_locator_release',
        '物料抓取数':'material_grab_nums',
        '填装旋转数':'filling_spin_nums',
        '填装下降数':'filling_decline_nums',
        '加盖检测数':'alid_detect_nums',
        '加盖定位数':'alid_locator_nums',
        '推盖数':'lid_push_nums',
        '加盖下降数':'alid_decline_nums',
        '拧盖检测数':'wlid_detect_nums',
        '拧盖定位数':'wlid_locator_nums',
        '拧盖下降数':'wlid_decline_nums',
        '拧盖旋转数':'wlid_spin_nums',
        '拧盖数':'wlid_nums',
        '合格数':'qualified_nums',
        '不合格数':'unqualified_nums',
        '物料推送装置故障1001':'error1001',
        '物料检测装置故障2001':'error2001',
        '填装装置检测故障4001':'error4001',
        '填装装置定位故障4002':'error4002',
        '填装装置填装故障4003':'error4003',
        '加盖装置定位故障5001':'error5001',
        '加盖装置加盖故障5002':'error5002',
        '拧盖装置定位故障6001':'error6001',
        '拧盖装置拧盖故障6002':'error6002'
    }
    # 修改列名
    raw_df=raw_df.rename(rename_columns)
    # 将target展为1列数据
    errors=['error1001', 'error2001','error4001', 'error4002', 'error4003', 'error5001', 'error5002','error6001', 'error6002']
    raw_df=raw_df.with_columns(
        pl.when(raw_df['error1001']==1001).then(1)
        .when(raw_df['error2001']==2001).then(2)
        .when(raw_df['error4001']==4001).then(3)
        .when(raw_df['error4002']==4002).then(4)
        .when(raw_df['error4003']==4003).then(5)
        .when(raw_df['error5001']==5001).then(6)
        .when(raw_df['error5002']==5002).then(7)
        .when(raw_df['error6001']==6001).then(8)
        .when(raw_df['error6002']==6002).then(9)
        .otherwise(0).alias('target')
    ).cast({'target': pl.Int8}).drop(errors)
    # 计算总产量
    raw_df=raw_df.with_columns(
        (pl.col('qualified_nums')+pl.col('unqualified_nums')).alias('yield')
    ).drop(['qualified_nums','unqualified_nums'])
    # 构建传送带运行状态
    raw_df=raw_df.with_columns(
        (pl.col('filling_locator_release')!=pl.col('filling_locator_release').shift()).cum_sum().fill_null(0)
        .alias('filling_locator_release_group')
    )
    raw_df=raw_df.with_columns(
        pl.when(pl.col('filling_locator_release')==1)
        .then(pl.col('filling_locator_release').cum_count().over('filling_locator_release_group'))
        .otherwise(0).alias('filling_locator_release_count'),
        (pl.col('alid_locator_nums')-pl.col('alid_decline_nums').shift(1).fill_null(0).over(['line_id','date']))
        .alias('alid_time'),
        (pl.col('wlid_locator_nums')-pl.col('wlid_spin_nums').shift(1).fill_null(0).over(['line_id','date']))
        .alias('wlid_time'),
    ).drop('filling_locator_release_group')
    raw_df=raw_df.with_columns(
        pl.when((pl.col('filling_locator_fixed')==1)|(pl.col('alid_time')==1)|(pl.col('wlid_time')==1)|(pl.col('filling_locator_release_count')>=12)).then(0).otherwise(1).alias('conveyor_running')
    ).drop(['filling_locator_release_count','alid_time','wlid_time'])
    # error1001
    raw_df=raw_df.with_columns(
        pl.when((pl.col('material_push')==1)&(pl.col('material_withdraw')==1))
        .then(1).otherwise(0).alias('material_condition'),
    ).drop(['material_push','material_withdraw'])
    raw_df=raw_df.with_columns(
        (pl.col('material_condition')!=pl.col('material_condition').shift()).cum_sum().fill_null(0)
        .alias('material_condition_group'),
    )
    raw_df=raw_df.with_columns(
        pl.when(pl.col('material_condition')==1)
        .then(pl.col('material_condition').cum_count().over('material_condition_group'))
        .otherwise(0).alias('material_condition_remain'),
    ).drop(['material_condition_group'])
    # error2001
    raw_df=raw_df.with_columns(
        pl.col('material_push_nums').diff().fill_null(0).over(['line_id','date'])
        .alias('material_push_nums_diff'),
        (pl.col('material_push_nums')!=pl.col('material_push_nums').shift()).cum_sum().fill_null(0)
        .alias('material_push_nums_group'),
        pl.when(pl.col('material_grab_remains').diff().fill_null(0).over(['line_id','date'])!=0)
        .then(1).otherwise(0).alias('material_grab_remains_diff'),
    )
    raw_df=raw_df.with_columns(
        pl.when(pl.col('material_push_nums_diff')==0)
        .then(pl.col('material_grab_remains_diff').cum_sum().over('material_push_nums_group')).otherwise(0)
        .alias('grab_remain_with_push_change_count'),
        pl.col('material_push_nums').cum_count().over('material_push_nums_group')
        .alias('material_push_nums_remain'),
    ).drop(['material_push_nums','material_push_nums_diff','material_push_nums_group','material_grab_remains_diff',])
    # error4001
    raw_df=raw_df.with_columns(
        pl.col('filling_detect_nums').diff().fill_null(0).over(['line_id','date'])
        .alias('filling_detect_nums_diff'),
        (pl.col('filling_detect_nums')!=pl.col('filling_detect_nums').shift()).cum_sum().fill_null(0)
        .alias('filling_detect_nums_group'),
        pl.when(pl.col('container_uploads_detect_nums').diff().fill_null(0).over(['line_id','date'])!=0)
        .then(1).otherwise(0).alias('container_uploads_detect_nums_diff')
    )
    raw_df=raw_df.with_columns(
        pl.when(pl.col('filling_detect_nums_diff')==0)
        .then(pl.col('container_uploads_detect_nums_diff').cum_sum().over('filling_detect_nums_group'))
        .otherwise(0).alias('filling_remain_with_container_change_count'),
        pl.col('filling_detect_nums').cum_count().over('filling_detect_nums_group')
        .alias('filling_detect_nums_remain')
    ).drop(['filling_detect_nums','filling_detect_nums_diff','filling_detect_nums_group','container_uploads_detect_nums','container_uploads_detect_nums_diff'])
    # error4002
    raw_df=raw_df.with_columns(
        pl.when((pl.col('filling_locator_fixed')==1)&(pl.col('filling_locator_release')==1))
        .then(1).otherwise(0).alias('filling_condition'),
    ).drop(['filling_locator_release'])
    raw_df=raw_df.with_columns(
        (pl.col('filling_condition')!=pl.col('filling_condition').shift()).cum_sum().fill_null(0)
        .alias('filling_condition_group'),
    )
    raw_df=raw_df.with_columns(
        pl.when(pl.col('filling_condition')==1)
        .then(pl.col('filling_condition').cum_count().over('filling_condition_group'))
        .otherwise(0).alias('filling_condition_remain'),
    ).drop(['filling_condition_group'])
    # error4003
    raw_df=raw_df.with_columns(
        pl.when((pl.col('filling_condition')==0)&(pl.col('filling_locator_fixed')==1)&((pl.col('material_grab_remains')>pl.col('material_grab_nums'))|(pl.col('material_grab_remains')>pl.col('filling_spin_nums'))|(pl.col('material_grab_remains')>pl.col('filling_decline_nums')))).then(1).otherwise(0).alias('filling_device_error'),
    ).drop(['material_grab_nums','filling_spin_nums','filling_decline_nums','filling_locator_fixed','material_grab_remains'])
    raw_df=raw_df.with_columns(
        (pl.col('filling_device_error')!=pl.col('filling_device_error').shift()).cum_sum().fill_null(0)
        .alias('filling_device_error_group'),
    )
    raw_df=raw_df.with_columns(
        pl.when(pl.col('filling_device_error')==1)
        .then(pl.col('filling_device_error').cum_count().over('filling_device_error_group'))
        .otherwise(0).alias('filling_device_error_remain'),
    ).drop(['filling_device_error_group'])
    # error5001
    raw_df=raw_df.with_columns(
        pl.when(pl.col('alid_detect_nums')!=pl.col('alid_locator_nums').shift(1).fill_null(0).over(['line_id','date']))
        .then(1).otherwise(0).alias('alid_locator_fixed_condition'),
        (pl.col('wlid_detect_nums')!=pl.col('wlid_detect_nums').shift()).cum_sum().fill_null(0).alias('wlid_detect_nums_group')
    ).drop(['alid_detect_nums'])
    raw_df=raw_df.with_columns(
        (pl.col('alid_locator_fixed_condition')!=pl.col('alid_locator_fixed_condition').shift()).cum_sum().fill_null(0).alias('alid_locator_fixed_condition_group'),
        pl.col('conveyor_running').cum_sum().over('wlid_detect_nums_group').alias('wlid_receive_time')
    ).drop('wlid_detect_nums_group')
    raw_df=raw_df.with_columns(
        pl.when(pl.col('alid_locator_fixed_condition')==1)
        .then(pl.col('alid_locator_fixed_condition').cum_count().over('alid_locator_fixed_condition_group'))
        .otherwise(0).alias('alid_locator_fixed_condition_remain'),
        (pl.col('wlid_receive_time')!=pl.col('wlid_receive_time').shift()).cum_sum().fill_null(0)
        .alias('wlid_receive_time_group')
    ).drop(['alid_locator_fixed_condition_group'])
    raw_df=raw_df.with_columns(
        pl.col('wlid_receive_time').cum_count().over('wlid_receive_time_group').alias('wlid_receive_time_remain')
    ).drop('wlid_receive_time_group')
    # error5002
    raw_df=raw_df.with_columns(
        pl.when((pl.col('alid_locator_nums')==pl.col('lid_push_nums'))&(pl.col('alid_locator_nums')==pl.col('alid_decline_nums'))).then(0).otherwise(1).alias('lid_locator_push_decline_differ'),
    ).drop(['alid_locator_nums','lid_push_nums','alid_decline_nums'])
    raw_df=raw_df.with_columns(
        (pl.col('lid_locator_push_decline_differ')!=pl.col('lid_locator_push_decline_differ').shift()).cum_sum().fill_null(0)
        .alias('lid_locator_push_decline_differ_group'),
    )
    raw_df=raw_df.with_columns(
        pl.when(pl.col('lid_locator_push_decline_differ')==1)
        .then(pl.col('lid_locator_push_decline_differ').cum_count().over('lid_locator_push_decline_differ_group'))
        .otherwise(0).alias('lid_locator_push_decline_differ_remain'),
    ).drop(['lid_locator_push_decline_differ_group'])
    # error6001
    raw_df=raw_df.with_columns(
        pl.when(pl.col('wlid_detect_nums')!=pl.col('wlid_locator_nums'))
        .then(1).otherwise(0).alias('wlid_locator_fixed_condition'),
        (pl.col('yield')!=pl.col('yield').shift()).cum_sum().fill_null(0).alias('yield_group')
    ).drop(['wlid_detect_nums','yield'])
    raw_df=raw_df.with_columns(
        (pl.col('wlid_locator_fixed_condition')!=pl.col('wlid_locator_fixed_condition').shift()).cum_sum().fill_null(0)
        .alias('wlid_locator_fixed_condition_group'),
        pl.col('conveyor_running').cum_sum().over('yield_group').alias('product_receive_time')
    ).drop('yield_group')
    raw_df=raw_df.with_columns(
        pl.when(pl.col('wlid_locator_fixed_condition')==1)
        .then(pl.col('wlid_locator_fixed_condition').cum_count().over('wlid_locator_fixed_condition_group'))
        .otherwise(0).alias('wlid_locator_fixed_condition_remain'),
        (pl.col('product_receive_time')!=pl.col('product_receive_time').shift()).cum_sum().fill_null(0)
        .alias('product_receive_time_group')
    ).drop(['wlid_locator_fixed_condition_group',])
    raw_df=raw_df.with_columns(
        pl.col('product_receive_time').cum_count().over('product_receive_time_group').alias('product_receive_time_remain')
    ).drop('product_receive_time_group')
    raw_df=raw_df.with_columns(
        pl.when(pl.col('wlid_receive_time')>pl.col('product_receive_time')).then(1).otherwise(0).alias('alid_worse')
    )
    # error6002
    raw_df=raw_df.with_columns(
        pl.when((pl.col('wlid_locator_nums')==pl.col('wlid_decline_nums'))&(pl.col('wlid_locator_nums')==pl.col('wlid_spin_nums'))&(pl.col('wlid_locator_nums')==pl.col('wlid_nums'))).then(0).otherwise(1).alias('wlid_locator_decline_spin_nums_differ')
    ).drop(['wlid_locator_nums','wlid_decline_nums','wlid_spin_nums','wlid_nums'])
    raw_df=raw_df.with_columns(
        (pl.col('wlid_locator_decline_spin_nums_differ')!=pl.col('wlid_locator_decline_spin_nums_differ').shift()).cum_sum().fill_null(0)
        .alias('wlid_locator_decline_spin_nums_differ_group'),
    )
    raw_df=raw_df.with_columns(
        pl.when(pl.col('wlid_locator_decline_spin_nums_differ')==1)
        .then(pl.col('wlid_locator_decline_spin_nums_differ').cum_count().over('wlid_locator_decline_spin_nums_differ_group'))
        .otherwise(0).alias('wlid_locator_decline_spin_nums_differ_remain'),
    ).drop(['wlid_locator_decline_spin_nums_differ_group'])
    return datatype_compress(raw_df)